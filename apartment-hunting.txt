You're looking to move into a new apartment, and you're given a list of blocks 
where each block contains an apartment that you could move into. In order to pick
your apartment, you want to optimize its location. You also have a list of requirements: 
a list of buildings that are important to you. For instance, you might value
having a school and a gym near your apartment. The list of blocks that you have contains 
information at every block about all of the buildings that are present
and absent at the block in question. For instance, for every block, you might know
whether a school, a pool, an office, and a gym are present or not. In order to
optimize your life, you want to minimize the farthest distance you'd have to walk from
your apartment to reach all of your required buildings. Write a function
that takes in a list of blocks and a list of your required buildings and that returns 
the location (the index) of the block that is most optimal for you.

Sample input:
[
{
"gym": False,
"school": True,
"store": False,
},
{
"gym": True,
"school": False,
"store": False,
},
{
"gym": True,
"school": True,
"store": False,
},
{
"gym": False,
"school": True,
"store": False,
},
{
"gym": False,
"school": True,
"store": True,
},
],
["gym","school","store"]
Sample output: 3 (at index 3, the farthest you would have to walk to reach a gym, a school, or a store, 
is 1 block; at any other index, you would have to walk farther)


Time -> O(N^2*M)
Space -> O(N)
main(arrObj, list)
let minSteps = []
for(let i = 0; i < arrObj.length; i++){
    minSteps[i] = getMinSteps(i,arrObj,list)
}
return minSteps.indexOf(Math.min(...minSteps))
}

function getMinSteps(idx, arrObj,list){
  let currItems = arrObj[idx]
  let minSteps = 0
  let left = idx
  let right = idx
  while(left >= 0 || right < arrObj.length){
    let leftObj = left >= 0 ? arrObj[left] : {}
    let rightObj = right < arrObj.length ? arrObj[right] : {}
    let combineItems = getCombineItems(leftObj,rightObj,currItems,list)
    if(containsAllItems(combineItems,list)) return minSteps
    minSteps++
    left--
    right++
  }
  return minSteps
}

function getCombineItems(leftObj,rightObj,currItems,list){
  for(let eachItem of list){
    currItems[eachItem] = leftObj[eachItem] || rightObj[eachItem] || currItems[eachItem] ? true : false
  }
  return currItems
}

function containsAllItems(obj,list){
  for(let i = 0; i < list.length; i++){
    let currItem = list[i]
    if(obj[currItem] === false) return false
  }
  return true
}



function apartmentHunting(blocks,reqs){
  let minSteps = []
  for(let i = 0; i < blocks.length; i++){
    minSteps[i] = getMinSteps(i,blocks,reqs)
  }
  return minSteps.indexOf(Math.min(...minSteps))
}

function getMinSteps(idx,blocks,reqs){
  let minSteps = 0
  let currItemObj = {}
  for(let key in blocks[idx]){
    currItemObj[key] = blocks[idx][key]
  }
  
  let left = idx
  let right = idx
  while(left >= 0 || right < blocks.length){
    let leftObj = left >= 0 ? blocks[left] : {}
    let rightObj = right < blocks.length ? blocks[right] : {}
    let currItemObj = getCombinedObj(leftObj,rightObj, currItemObj,reqs)
    if(containsAllReq(currItemObj,reqs)) return minSteps
    minSteps++
    left--
    right++
  }
  return minSteps
}

function getCombinedObj(leftObj,rightObj,currItemObj,reqs){
  for(let eachReq of reqs){
    currItemObj[eachReq] = leftObj[eachReq] || rightObj[eachReq] || currItemObj[eachReq] ? true : false
  }
  return currItemObj
}

function containsAllReq(currItemObj,reqs){
  for(let i = 0; i < reqs.length; i++){
    let ER = reqs[i]
    if(currItemObj[ER] === false) return false
  }
  return true
}










